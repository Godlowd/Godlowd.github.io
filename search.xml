<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>在自己的博客中插入BGM</title>
    <url>/2020/03/09/%E5%9C%A8%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5BGM/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>前几天心血来潮,觉得自己的博客应该加一点背景音乐.<del>于是程序员他说”要有music”,便有了music</del> 事情怎么可能这么美好!.不出意外的在插入背景音乐的过程中又遇到了许多问题,最后的解决方式也是和之前一样的<strong>玄学</strong>,不过还是开个帖子记录一下🤔</p>
<a id="more"></a>
<p>从这几天在网络上找到的资料来看插入背景音乐的方法大概分三类</p>
<ol>
<li>利用音乐平台的”外链生成器”,然后插入到网页当中</li>
<li>利用<code>hexo-tag-aplayer</code>插件,在写博客的时候把歌曲插入到对应的博文之中</li>
<li>使用<code>Aplayer</code>,全局的生成背景音乐播放器.</li>
</ol>
<h2 id="外链生成器"><a href="#外链生成器" class="headerlink" title="外链生成器"></a>外链生成器</h2><p>这个方法的优点是<strong>简单,高效</strong>,不像其他的两种方法又是安装插件又是自己设置音乐的<code>url</code>,<code>歌词</code>等等,但是很致命的问题是并不是音乐平台上所有的歌曲都支持外链生成.比如:<br>更不要提啥时候这首歌在网易云就会变灰….所以这种依赖音乐平台自身的插入BGM的方法在这里并不适合我<br>所以接下来我们考虑第二种</p>
<h2 id="hexo-tag-player插件"><a href="#hexo-tag-player插件" class="headerlink" title="hexo-tag-player插件"></a>hexo-tag-player插件</h2><p><code>hexo-tag-player</code>本质上就是我们第三种方法的一个插件,<a href="https://github.com/MoePlayer/hexo-tag-aplayer" target="_blank" rel="noopener">GitHub项目地址</a>送上.<br>首先我们要在博客的目录下面打开<code>git bash</code>,输入<code>npm install --save hexo-tag-aplayer</code>指令来安装这款插件,如果是在Linux系统下面就应该是要打开终端了.不过使用这个功能的前提是<code>Aplayer.js</code>的版本要高于<code>1.8.0</code>,<code>Meting.js</code>的版本要高于<code>1.1.1</code>.(Meting属于后面的扩展内容.不是必须项).然后就可以在<strong>博客的正文的markdown里面</strong>,插入下面的神奇代码,来实现背景音乐播放</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</span><br></pre></td></tr></table></figure>
<p>这里稍稍解释下标签参数,GitHub文档中都有很详细的描述.</p>
<table>
<thead>
<tr>
<th>标签</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td><code>title</code></td>
<td>曲目标题</td>
</tr>
<tr>
<td><code>author</code></td>
<td>曲目作者</td>
</tr>
<tr>
<td><code>url</code></td>
<td>音乐文件 URL 地址</td>
</tr>
<tr>
<td><code>picture_url</code></td>
<td>(可选) 音乐对应的图片地址</td>
</tr>
<tr>
<td><code>narrow</code></td>
<td>(可选) 播放器袖珍风格</td>
</tr>
<tr>
<td><code>autoplay</code></td>
<td>(可选) 自动播放，移动端浏览器暂时不支持此功能</td>
</tr>
<tr>
<td><code>width:xxx</code></td>
<td>(可选) 播放器宽度 (默认: 100%)</td>
</tr>
<tr>
<td><code>lrc:xxx</code></td>
<td>(可选)歌词文件 URL 地址</td>
</tr>
</tbody></table>
<p>同样,歌词标签和播放列表GitHub的<a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md" target="_blank" rel="noopener">文档</a>里都有写.不过这个地方我真的要吐槽一下.文档虽然写的很翔实各种参数都给你标注出来了但是你<sup>TM</sup> 都不告诉我在那里插入这段神奇代码的吗?不说谁知道是插入在布局的swig文件还是markdown还是别的啥地方啊.(来自一个一点都不会前端的菜鸡深深的怨念).<br>不过这种方法也有缺点,就是必须在写文章的时候插入.这就不符合我的全局的要求.所以我们转向它的本尊-Aplayer</p>
<h2 id="APlayer"><a href="#APlayer" class="headerlink" title="APlayer"></a>APlayer</h2><p>同样,还是先贴<a href="https://github.com/MoePlayer/APlayer" target="_blank" rel="noopener">GitHub项目地址</a>.要使用Aplayer首先需要<code>npm install aplayer --save</code>安装.<a href="https://aplayer.js.org/#/zh-Hans/" target="_blank" rel="noopener">中文文档</a>在这里.然后从它的仓库clone下来它的代码,把其中的<code>dist</code>文件夹拷贝到<code>themes\next\source</code> 下面,再在<code>dist</code>文件夹中新建一个<code>music.js</code>.然后把这段代码拷贝进去</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ap = <span class="keyword">new</span> APlayer(&#123;</span><br><span class="line">    container: <span class="built_in">document</span>.getElementById(<span class="string">'aplayer'</span>),</span><br><span class="line">    audio: [&#123;</span><br><span class="line">        name: <span class="string">'name'</span>,</span><br><span class="line">        artist: <span class="string">'artist'</span>,</span><br><span class="line">        url: <span class="string">'url.mp3'</span>,</span><br><span class="line">        cover: <span class="string">'cover.jpg'</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这里就不一一列举参数了,就捡几个主要的说</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>默认值</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td><code>container</code></td>
<td>document.querySelector(‘.aplayer’)</td>
<td>播放器容器元素</td>
</tr>
<tr>
<td><code>fixed</code></td>
<td>false</td>
<td>开启吸底模式</td>
</tr>
<tr>
<td><code>mini</code></td>
<td>false</td>
<td>开启迷你模式</td>
</tr>
<tr>
<td><code>autoplay</code></td>
<td>false</td>
<td>音频自动播放</td>
</tr>
<tr>
<td><code>theme</code></td>
<td>‘#b7daff’</td>
<td>主题色</td>
</tr>
<tr>
<td><code>loop</code></td>
<td>‘all’</td>
<td>音频循环播放, 可选值: ‘all’, ‘one’, ‘none’</td>
</tr>
<tr>
<td><code>order</code></td>
<td>‘list’</td>
<td>音频循环顺序, 可选值: ‘list’, ‘random’</td>
</tr>
<tr>
<td><code>preload</code></td>
<td>‘auto’</td>
<td>预加载，可选值: ‘none’, ‘metadata’, ‘auto’</td>
</tr>
</tbody></table>
<p>一段成熟的代码应该像下面这个亚子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ap = <span class="keyword">new</span> APlayer(&#123;</span><br><span class="line">    container: <span class="built_in">document</span>.getElementById(<span class="string">'player'</span>),</span><br><span class="line">    mini: <span class="literal">false</span>,</span><br><span class="line">    autoplay: <span class="literal">false</span>,</span><br><span class="line">    theme: <span class="string">'#FADFA3'</span>,</span><br><span class="line">    loop: <span class="string">'all'</span>,</span><br><span class="line">    order: <span class="string">'random'</span>,</span><br><span class="line">    preload: <span class="string">'auto'</span>,</span><br><span class="line">    volume: <span class="number">0.7</span>,</span><br><span class="line">    mutex: <span class="literal">true</span>,</span><br><span class="line">    listFolded: <span class="literal">false</span>,</span><br><span class="line">    listMaxHeight: <span class="number">90</span>,</span><br><span class="line">    lrcType: <span class="number">3</span>,</span><br><span class="line">    audio: [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'name1'</span>,</span><br><span class="line">            artist: <span class="string">'artist1'</span>,</span><br><span class="line">            url: <span class="string">'url1.mp3'</span>,</span><br><span class="line">            cover: <span class="string">'cover1.jpg'</span>,</span><br><span class="line">            lrc: <span class="string">'lrc1.lrc'</span>,</span><br><span class="line">            theme: <span class="string">'#ebd0c2'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'name2'</span>,</span><br><span class="line">            artist: <span class="string">'artist2'</span>,</span><br><span class="line">            url: <span class="string">'url2.mp3'</span>,</span><br><span class="line">            cover: <span class="string">'cover2.jpg'</span>,</span><br><span class="line">            lrc: <span class="string">'lrc2.lrc'</span>,</span><br><span class="line">            theme: <span class="string">'#46718b'</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>将上面这段完整的代码写进<code>music.js</code>,其他的选项可以自己设定.提一下,在Aplayer的官方文档中似乎没有提到可以利用资源文件夹的操作,所以在填写url链接的时候需要注意.有兴趣的小伙伴可以试一试利用本地资源的方法.在我自己的代码我是采用外链的方法.虽然我觉得这个外链的获取方式堪称奇技淫巧,但它偏偏就是有效(摊手).<br>还是到网易云,找到想听的歌.<br><img src="https://raw.githubusercontent.com/Godlowd/MarkdownPhoto/master/InsertBGM/%E7%BD%91%E6%98%93%E4%BA%91%E6%89%BE%E6%AD%8C.png" alt=""></p>
<p>然后复制地址栏中的链接，粘贴到上面的<code>url</code>字段,然后修改一下.让我来举个🍒.</p>
<p>从网易云音乐上复制下来的<code>Skylark</code>的链接为<code>https://music.163.com/#/song?id=32320830</code>,只需要把它魔改成<code>https://music.163.com/song/media/outer/url?id=32320830.mp3</code>.一个有效的url链接就诞生了.</p>
<p>别问我原理是啥….我也不清楚.But it does work.所以对于任何网易云音乐上的歌(只要它收录了),我们都可以采用这种方式来获取它的<code>url</code>.至于其他的音乐平台,如QQ,虾米,这种方式我还没有试过.欢迎试过的同学在评论区讨论一下吼~.至于如何获取专辑的图片.只需要在网页专辑右键,然后选择<code>检查</code>项.找到其中的后缀为<code>png</code>或者<code>jpg</code>的链接即可.就像下面这样.<img src="https://raw.githubusercontent.com/Godlowd/MarkdownPhoto/master/InsertBGM/%E8%8E%B7%E5%8F%96%E4%B8%93%E8%BE%91%E5%B0%81%E9%9D%A2.png" alt=""></p>
<p>右上角第一个箭头和第二个箭头指向的路径其实是一个(<del>那你画两个箭头干嘛</del>),只不过第一个路径相比第二个路径在他的jpg后面多了一串代码.至此我们的准备工作就差不多结束了.万事俱备,只欠东风.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"/dist/APlayer.min.css"</span>&gt;</span><br><span class="line">&lt;div id=<span class="string">"aplayer"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">" src="</span>/dist/APlayer.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script type="</span>text/javascript<span class="string">" src="</span>/dist/music.js<span class="string">"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>打开<br><code>theme/next/layout</code>路径下面的<code>_layout.swig</code>文件.<img src="https://raw.githubusercontent.com/Godlowd/MarkdownPhoto/master/InsertBGM/_layout.swig%E6%96%87%E4%BB%B6.png" alt="">.把上面那段代码插入到<code>&lt;body itemscope...&gt;</code>之后,<code>&lt;/body&gt;</code>之前即可(<code>&lt;/body&gt;</code>没有在截图中显示出来).我是直接插入在了第13行.然后重新部署我们的博客,重启,大功告成!在博客的左下角即可看到我们附底模式的Aplayer<br><img src="https://raw.githubusercontent.com/Godlowd/MarkdownPhoto/master/InsertBGM/%E5%A4%A7%E5%8A%9F%E5%91%8A%E6%88%90.png" alt=""></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://helloblack2017.github.io/2018/04/22/use-hexo-tag-aplayer/" target="_blank" rel="noopener">Hugo Black的Blog</a><br><a href="https://mackvord.github.io/aplayer-dplayer/547187035.html" target="_blank" rel="noopener">Mackvord’s Blog</a><br><a href="https://hakurei.red/2019/11/25/%E4%B8%BAHexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%85%A8%E5%B1%80APlayer%E6%92%AD%E6%94%BE%E5%99%A8/" target="_blank" rel="noopener">博丽吹笛分社 - 为Hexo博客添加全局APlayer播放器 </a></p>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>评论系统Valine的使用</title>
    <url>/2020/03/07/%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9FValine%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="评论系统Valine的使用"><a href="#评论系统Valine的使用" class="headerlink" title="评论系统Valine的使用"></a>评论系统Valine的使用</h1><p><a href="https://ioliu.cn/2017/add-valine-comments-to-your-blog/" target="_blank" rel="noopener">@云淡风轻</a> 开发了一款轻量级的Blog评论应用,这里记录下Valine的使用和自定义过程</p>
<a id="more"></a>

<h2 id="获取App-ID和App-Key"><a href="#获取App-ID和App-Key" class="headerlink" title="获取App ID和App Key"></a>获取App ID和App Key</h2><p>在<a href="https://leancloud.cn/dashboard/applist.html#/apps" target="_blank" rel="noopener">LeanCloud的官网</a>上注册一个帐号,实名并邮箱验证通过之后可以<a href="https://leancloud.cn/dashboard/applist.html#/apps" target="_blank" rel="noopener">这里</a>创建一个应用.应用名可以随便取.</p>
<p>在刚刚创建的应用的设置中选择<strong>应用Key</strong>,就可以看到这个应用的App ID和App Key了.<br><img src="https://raw.githubusercontent.com/Godlowd/MarkdownPhoto/master/TIM%E6%88%AA%E5%9B%BE20200307120352.png" alt="TIM截图20200307120352"></p>
<h2 id="设置安全域名"><a href="#设置安全域名" class="headerlink" title="设置安全域名"></a>设置安全域名</h2><p>然后打开设置中的<strong>安全中心</strong>,在下面的<strong>Web安全域名</strong>中填入我们网站的域名,如下图<br><img src="https://raw.githubusercontent.com/Godlowd/MarkdownPhoto/master/%E5%A1%AB%E5%86%99Web%E5%AE%89%E5%85%A8%E5%9F%9F%E5%90%8D.png" alt="填写Web安全域名"></p>
<h2 id="在主题配置文件中填入相应字段"><a href="#在主题配置文件中填入相应字段" class="headerlink" title="在主题配置文件中填入相应字段"></a>在主题配置文件中填入相应字段</h2><p>打开博客所在目录,找到<strong>主题</strong>的配置文件,不是整个博客的.在文本中搜索”valine”,把刚才获取到的App ID和App Key填入进去.<br><img src="https://raw.githubusercontent.com/Godlowd/MarkdownPhoto/master/%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png" alt="修改配置文件"><br>这里提一个坑,在复制App ID和App Key的时候注意不要<strong>激活了后面的注释</strong>,如果注释被视为了代码的一部分就会报一个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Code : undefined [410 GET https:&#x2F;&#x2F;avoscloud.com&#x2F;1.1&#x2F;classes&#x2F;Comment]</span><br></pre></td></tr></table></figure>
<p>的错误,这个时候就应该检查一下是否配置文件中的注释出现了问题<br>另外在这个过程中还可能出现其他的问题,比如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Code 403: 访问被api域名白名单拒绝，请检查你的安全域名设置</span><br></pre></td></tr></table></figure>
<p>就要检查在第二步<strong>设置安全域名</strong>的过程中是否漏掉了网址最后的”/“,比如原来的网址是<code>https://godlowd.github.io/</code>,但是填写进去的时候是<code>https://godlowd.github.io</code>.建议还是直接复制浏览器地址栏中的地址,再粘贴进去,就可以避免类似问题<br>重新部署我们的Blog之后打开就可以看到评论功能了.不过这个时候还处于一个比较基本的状态.要进行更深层次的定制还需要进一步优化.</p>
<h2 id="打开评论邮件提醒系统"><a href="#打开评论邮件提醒系统" class="headerlink" title="打开评论邮件提醒系统"></a>打开评论邮件提醒系统</h2><p>首先贴一下<a href="https://github.com/zhaojun1998/Valine-Admin" target="_blank" rel="noopener">大佬的GitHub项目地址</a>,这是一个Valine的拓展应用,可以用来通知站长新评论,而且支持自定义邮件主题(有一说一,彩虹色的还蛮好康的嗷).下面就让我来康康这个玩意是怎么整的</p>
<h3 id="设置代码库"><a href="#设置代码库" class="headerlink" title="设置代码库"></a>设置代码库</h3><p>首先我们需要在Lean Cloud的<strong>云引擎</strong>的<strong>设置</strong>中把上面大佬的项目地址添加进去并保存<br><img src="https://raw.githubusercontent.com/Godlowd/MarkdownPhoto/master/%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%A0%81%E5%BA%93.png" alt="设置代码库"></p>
<h3 id="自定义环境变量"><a href="#自定义环境变量" class="headerlink" title="自定义环境变量"></a>自定义环境变量</h3><p>光有了大佬的代码还不够,我们还需要知道有了新评论如何登录一个邮箱并且把通知发送到站长的邮箱不是?,所以我们需要在<strong>环境变量</strong>这个地方设置好这些东西</p>
<table>
<thead>
<tr>
<th>环境变量名</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>SITE_NAME</td>
<td>网站名称,就是在博客的配置文件中的<strong>title</strong>项</td>
</tr>
<tr>
<td>SITE_URL</td>
<td>网站的地址,*<em>最后不要加 / *</em>,和上面的安全域名略有不同</td>
</tr>
<tr>
<td>SMTP_USER</td>
<td>SMTP 服务用户名，一般为邮箱地址。</td>
</tr>
<tr>
<td>SMTP_PASS</td>
<td>SMTP密码,这个可以自行查询对应邮件服务商的获取方式,不是登录密码</td>
</tr>
<tr>
<td>SMTP_SERVICE</td>
<td>邮件服务提供商,支持<code>QQ</code>、<code>163</code>、<code>126</code>、<code>Gmail</code>、<code>Yahoo</code></td>
</tr>
<tr>
<td>SENDER_NAME</td>
<td>寄件人名称</td>
</tr>
</tbody></table>
<p><img src="https://raw.githubusercontent.com/Godlowd/MarkdownPhoto/master/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt="SENDER_NAME"></p>
<p>另外还有一些环境变量是这样子的:</p>
<table>
<thead>
<tr>
<th>环境变量名</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>TO_EMAIL</td>
<td>指定<strong>收信信箱</strong>,默认为SITE_USER.用于SITE_USER发件人和收件人不一致的情况下使用</td>
</tr>
<tr>
<td>TEMPLATE_NAME</td>
<td>提醒邮件的模板,默认为default,目前支持rainbow</td>
</tr>
</tbody></table>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>切换到<strong>部署</strong>页面,选择中间的Git源码部署,下面的分支或版本号填写<strong>master</strong>,,然后等待大概7-8分钟.<br><img src="https://raw.githubusercontent.com/Godlowd/MarkdownPhoto/master/%E9%83%A8%E7%BD%B2.png" alt="部署"><br>部署完成之后的页面应该是这个样子<br><img src="https://raw.githubusercontent.com/Godlowd/MarkdownPhoto/master/%E9%83%A8%E7%BD%B22.png" alt="部署2"></p>
<p>不过很奇怪的是部署完成之后我的web组栏下面并没有和<a href="https://11.tt/posts/2018/add-valine-to-your-blog/" target="_blank" rel="noopener">其他博主一样</a>出现实例的字样.这也导致了他们的重启实例我不知道在哪里运行.如果有知道的兄弟萌欢迎在评论区指出.</p>
<p>不过困难总是可以克服的嘛.既然不能在实例里面重启,那我就在部署的生产环境里重启.反正都是重启不是?(此处手动贴吧滑稽).</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>上述工作完成之后,我们在主题的配置文件中选择将它的<code>notify</code>项设为<code>true</code>来打开邮件提醒,同时在评论区输入一条评论来测试一下.<br><img src="https://raw.githubusercontent.com/Godlowd/MarkdownPhoto/master/%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.PNG" alt="测试结果"><br>就测试结果来看.确实我收到了自己给自己发的邮件(因为之前在设置环境变量的时候设置的是这样子的嘛).而且发送邮件的主题也和我们在环境变量中定义的<code>rainbow</code>相同.我们可以认为Valine的邮件提醒功能算是成功启动了.</p>
<p><img src="https://raw.githubusercontent.com/Godlowd/MarkdownPhoto/master/%E5%A6%99%E5%95%8A.jpg" alt="妙啊"></p>
<h2 id="Valine的其他功能"><a href="#Valine的其他功能" class="headerlink" title="Valine的其他功能"></a>Valine的其他功能</h2><p>时间关系,本人还需要苦逼的干活,所以不能一次性整完Valine的全部功能,目前在日程表上的计划(日程表: 我不是我没有你别瞎说)有更换自定义表情包,开辟专门的留言板页面.取消显示OS和浏览器型号,支持游客的留言被回复也可被通知,等等.辣么就下次再见啦</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://deserts.io/valine-admin-document/" target="_blank" rel="noopener">https://deserts.io/valine-admin-document/</a><br><a href="https://bestzuo.cn/posts/3307440964.html" target="_blank" rel="noopener">https://bestzuo.cn/posts/3307440964.html</a><br><a href="https://deserts.io/diy-a-comment-system/" target="_blank" rel="noopener">https://deserts.io/diy-a-comment-system/</a><br><a href="https://rightofriver.github.io/2019/10/30/ValineBug1/#fnref:3" target="_blank" rel="noopener">https://rightofriver.github.io/2019/10/30/ValineBug1/#fnref:3</a></p>
]]></content>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统原理笔记</title>
    <url>/2020/03/02/OS/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Operating-System"><a href="#Operating-System" class="headerlink" title="Operating System"></a>Operating System</h1><p>操作系统原理课程学习笔记</p>
<a id="more"></a>
<ul>
<li>没有安装操作系统,计算机<strong>依然可以运行程序</strong></li>
<li>普通用户不能正常使用</li>
</ul>
<h4 id="操作系统功能和定义"><a href="#操作系统功能和定义" class="headerlink" title="操作系统功能和定义"></a>操作系统功能和定义</h4><ol>
<li>进程管理(CPU管理)</li>
</ol>
<ul>
<li>进程控制: 创建,暂停,唤醒,撤销</li>
<li>进程调度: 调度策略,优先级</li>
<li>进程通信: 进程间通信</li>
</ul>
<ol start="2">
<li>内存管理</li>
</ol>
<ul>
<li>内存分配</li>
<li>内存共享</li>
<li>内存保护</li>
<li>虚拟内存</li>
</ul>
<ol start="3">
<li>设备管理</li>
</ol>
<ul>
<li>设备管理和调度</li>
<li>设备无关性</li>
<li>设备传输控制</li>
<li>设备驱动</li>
</ul>
<ol start="4">
<li>文件管理</li>
</ol>
<ul>
<li>存储空间操作</li>
<li>文件操作</li>
<li>目录操作</li>
<li>文件和目录存取权限的管理</li>
</ul>
<h4 id="操作系统定义"><a href="#操作系统定义" class="headerlink" title="操作系统定义"></a>操作系统定义</h4><ul>
<li>提供用户<strong>接口</strong></li>
<li>负责为应用程序<strong>分配和调度软硬件资源</strong>, 控制与协调程序并发活动,帮助用户存取等等</li>
</ul>
<h4 id="操作系统的特性"><a href="#操作系统的特性" class="headerlink" title="操作系统的特性"></a>操作系统的特性</h4><ul>
<li>并发性: 同时处理多个任务的能力</li>
<li>共享性: 为多个并发任务提供资源共享</li>
<li>不确定性: 具有处理随机事件的能力,例如处理终端,自动化处理能力</li>
</ul>
<h4 id="操作系统历史"><a href="#操作系统历史" class="headerlink" title="操作系统历史"></a>操作系统历史</h4><p><strong>用户需求提升</strong>和<strong>硬件技术进步</strong>是操作系统发展两大动力<br><strong>计算机硬件发展</strong>的四个典型阶段:</p>
<ol>
<li>电子管</li>
<li>晶体管</li>
<li>集成电路</li>
<li>大规模集成电路</li>
</ol>
<p><strong>操作系统</strong>发展的四个典型阶段</p>
<p>每一类操作系统是如何<strong>提升CPU/设备利用率的</strong></p>
<ol>
<li>手工</li>
<li>单道批处理系统(批量,自动,单道)<br>将多个作业输入到磁盘形成作业队列<br>操作系统依次自动处理队列中的每个作业<br>外设和CPU交替空闲和忙碌,利用效率低</li>
<li>多道批处理系统(多道,并行(宏观),串行(微观))<br>存放<strong>多道程序</strong><br>缺点:作业处理时间长,交互能力差,运行时间不确定</li>
<li>分时系统</li>
</ol>
<h4 id="分时技术与分时操作系统"><a href="#分时技术与分时操作系统" class="headerlink" title="分时技术与分时操作系统"></a>分时技术与分时操作系统</h4><ul>
<li>中断技术, 通道技术: 专门处理外设与内存之间数据传输的处理机(通道)<br>多终端计算机: <ul>
<li>高性能主机 + 多个终端<ul>
<li>主机:运算,CPU强大,大容量内存</li>
<li>终端: 输入和显示,通过串口线远程连接至主机<br>采用分时技术轮流为每个终端服务</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>分时技术</strong>:    主机以<strong>很短</strong>的<strong>时间片</strong>为单位,把CPU轮流分给每个终端使用,直到作业全被执行完.由于<strong>时间片</strong>很短,每个终端都能很快重新获得CPU,得到及时响应.</p>
<p><strong>等待周期</strong> = <strong>时间片</strong> $\times$ 终端数量</p>
<p>#####　分时系统的特点</p>
<ul>
<li><p>多路调制性:<strong>多用户</strong>联机使用同一台计算机</p>
</li>
<li><p>交互性: 及时响应</p>
</li>
<li><p>独占性: 用户感觉独占计算机</p>
</li>
<li><p>大型分时系统的实践:Multics</p>
</li>
</ul>
<h5 id="UNIX"><a href="#UNIX" class="headerlink" title="UNIX"></a>UNIX</h5><ul>
<li>第一个<strong>实用化</strong>的分时操作系统</li>
<li>实现了操作系统的<strong>可移植性</strong></li>
<li>实现了硬件无关性</li>
<li>引进了特殊文件的概念:<br>把外设看作文件,实现统一管理</li>
</ul>
<h4 id="典型操作系统类型"><a href="#典型操作系统类型" class="headerlink" title="典型操作系统类型"></a>典型操作系统类型</h4><ul>
<li>微机操作系统</li>
<li>多处理机</li>
<li>网络</li>
<li>实时</li>
<li>嵌入式</li>
<li>分布式</li>
</ul>
<h5 id="微机系统"><a href="#微机系统" class="headerlink" title="微机系统"></a>微机系统</h5><p>Control Program Microprocessor </p>
<ul>
<li>良好的层次结构,<strong>BIOS</strong>将操作系统和硬件分隔<br>Mac OSxi</li>
<li>最早使用图形界面和鼠标的操作系统<br>MS DOS</li>
<li>磁盘操作系统</li>
<li>单用户单任务<br>Windows</li>
</ul>
<h5 id="实时操作系统"><a href="#实时操作系统" class="headerlink" title="实时操作系统"></a>实时操作系统</h5><p>产生背景:某些任务<strong>优先紧急</strong>处理<br>强调作业完成时限</p>
<h5 id="嵌入式"><a href="#嵌入式" class="headerlink" title="嵌入式"></a>嵌入式</h5><p>约等于实时操作系统,实时OS可以看作嵌入式OS的一个分支</p>
<ul>
<li>软硬件可以裁剪,软硬件一体化,考虑成本造价需求等自己选择硬件和OS.</li>
<li>典型的嵌入式操作系统:Linux,ucOS</li>
</ul>
<h5 id="网络操作系统"><a href="#网络操作系统" class="headerlink" title="网络操作系统"></a>网络操作系统</h5><p>在普通操作系统的基础上增加了网络通信和网络服务的功能,常见的操作系统都是网络操作系统UNIX,LINUX,WINDOWS</p>
<ul>
<li>网络资源透明存取</li>
<li>存取控制</li>
</ul>
<h3 id="操作系统评价指标"><a href="#操作系统评价指标" class="headerlink" title="操作系统评价指标"></a>操作系统评价指标</h3><ul>
<li>吞吐率: 单位时间处理信息的能力</li>
<li>响应能力: 从接收数据到输出结果的时间间隔</li>
<li>资源利用率: 设备的使用频度(CPU,内存等等),以更优化的调度和管理方式让CPU尽可能的忙碌.</li>
<li>可移植性:改变硬件环境仍能正常工作的能力(<strong>代码修改量</strong>)</li>
<li>可靠性:发现,诊断和恢复系统故障的能力</li>
</ul>
<h3 id="操作系统逻辑结构"><a href="#操作系统逻辑结构" class="headerlink" title="操作系统逻辑结构"></a>操作系统逻辑结构</h3><ul>
<li>设计逻辑和实现思路</li>
</ul>
<ol>
<li>整体式</li>
<li>层次式</li>
<li>微内核式</li>
</ol>
<h5 id="整体式"><a href="#整体式" class="headerlink" title="整体式"></a>整体式</h5><p>以<strong>模块</strong>为基本单位构建</p>
<p>特点：</p>
<ul>
<li>模块设计，编码，调试独立</li>
<li>模块调度自由</li>
<li>通信多以<strong>全局变量</strong>完成，</li>
</ul>
<p>缺点：</p>
<ul>
<li>信息传递随意，维护和更新困难</li>
</ul>
<h5 id="层次式"><a href="#层次式" class="headerlink" title="层次式"></a>层次式</h5><p>TCP/IP协议栈，越往底层和硬件联系越紧密，越往上层和用户联系越紧密</p>
<p>分层原则：</p>
<ul>
<li>硬件相关——最底层</li>
<li>外部特性——最外层</li>
<li>中间层——调用次序或消息传递顺序</li>
<li>共性的服务——较低层</li>
<li>活跃功能——较低层</li>
</ul>
<p>优点： </p>
<ul>
<li>结构清晰，避免循环调用</li>
<li>整体问题局部化，系统的正确性容易保证</li>
<li>有利于操作系统的扩充，维护和移植</li>
</ul>
<h5 id="Linux内核"><a href="#Linux内核" class="headerlink" title="Linux内核"></a>Linux内核</h5><p>Linux = 内核 + shell + X Windows+ 应用程序<br>宏内核结构<br>将图形,设备驱动,及文件系统全部功能都在内核实现.</p>
<ul>
<li>优点: 减少通信和状态切换开销,运行效率较高</li>
<li></li>
</ul>
<h5 id="微内核-客户-服务器结构"><a href="#微内核-客户-服务器结构" class="headerlink" title="微内核(客户/服务器结构)"></a>微内核(客户/服务器结构)</h5><p>微内核 + 核外服务器</p>
<p>微内核： 提供os最基本的核心功能和服务</p>
<ul>
<li>优点: 内核便于裁剪和移植,稳定性和安全性较高.</li>
<li>实现与硬件紧密相关的处理</li>
<li>实现一些较基本的功能</li>
<li>负责客服和服务器间的通信<br>核外服务器： 完成os的绝大部份服务功能，等待应用程序提出请求</li>
<li>由若干服务器或者进程共同构成</li>
</ul>
<h3 id="CPU的态"><a href="#CPU的态" class="headerlink" title="CPU的态"></a>CPU的态</h3><p>支持OS最基本的硬件结构：</p>
<ol>
<li>CPU</li>
<li>内存</li>
<li>中断</li>
<li>时钟</li>
</ol>
<h3 id="CPU态"><a href="#CPU态" class="headerlink" title="CPU态"></a>CPU态</h3><p>CPU的工作状态，也是一种对资源和指令使用权限的描述</p>
<p>态主要可分为3类：</p>
<ol>
<li>核态（kernel mode), 可访问所有资源，使用所有指令，管理程序或OS内核</li>
<li>用户态(User mode)，可访问部分资源，权限受限，用户程序</li>
<li>管态(Supervisor mode)，介于二者之间</li>
</ol>
<h4 id="用户态和核态的相互转换"><a href="#用户态和核态的相互转换" class="headerlink" title="用户态和核态的相互转换"></a>用户态和核态的相互转换</h4><p>用户态向核态转换：</p>
<ul>
<li>用户请求OS提供服务</li>
<li>发生中断</li>
<li>用户进程产生错误（产生中断）</li>
<li>用户态企图执行特权指令</li>
</ul>
<p>核态向用户态转换：</p>
<ul>
<li>中断返回：IRET</li>
</ul>
<h4 id="硬件和OS对CPU的观察"><a href="#硬件和OS对CPU的观察" class="headerlink" title="硬件和OS对CPU的观察"></a>硬件和OS对CPU的观察</h4><ul>
<li>硬件按照<strong>态</strong>，核态或者用户态，来区分CPU的状态</li>
<li>OS按<strong>进程</strong>来区分CPU的状态，进程A，进程B，还是进程C</li>
</ul>
<h5 id="Intel-CPU的态"><a href="#Intel-CPU的态" class="headerlink" title="Intel CPU的态"></a>Intel CPU的态</h5><ul>
<li>Ring0～Ring3（0为最核心，3为最外层）</li>
<li>程序A访问程序B时需要进行权限的检查，也就是对态的检查，比较DPL和RPL</li>
<li>RPL描述程序段的属性</li>
</ul>
<h4 id="存储程序和数据的部件"><a href="#存储程序和数据的部件" class="headerlink" title="存储程序和数据的部件"></a>存储程序和数据的部件</h4><ul>
<li><p>按照读写的工作方式： </p>
<p>RAM</p>
<p>ROM:固定在主板上,普通用户无法直接更新和拆除</p>
</li>
<li><p>按照与CPU的联系：<br>主存:直接与CPU交换信息<br>辅存:不能直接与CPU交换信息</p>
</li>
</ul>
<h5 id="分级存储系统的工作原理"><a href="#分级存储系统的工作原理" class="headerlink" title="分级存储系统的工作原理"></a>分级存储系统的工作原理</h5><p>CPU读取指令或数据时访问顺序：</p>
<ol>
<li>首先访问高速缓存Cache中的数据，如果需要访问的数据在Cache中，称之为命中</li>
<li>如果没有命中，则CPU会到主存中访问，如果没有，则MISS</li>
<li>再到辅存中访问，如果辅存中也没有，则称之为缺页</li>
</ol>
<h3 id="中断机制"><a href="#中断机制" class="headerlink" title="中断机制"></a>中断机制</h3><ul>
<li>CPU对突发外部事件反应过程或机制</li>
<li>CPU收到<strong>外部信号</strong>(中断信号),停止当前工作,转去处理该<strong>外部信号</strong>,处理完毕之后回到原来工作的<strong>中断处</strong>(断点)继续原来的工作</li>
<li>引入中断的目的<ol>
<li>实现并发活动</li>
<li>实现实时处理</li>
<li>故障自动处理</li>
</ol>
</li>
</ul>
<h4 id="中断的一些基本概念"><a href="#中断的一些基本概念" class="headerlink" title="中断的一些基本概念"></a>中断的一些基本概念</h4><p>中断源: 引起系统中断的事件</p>
<p>断点: 将要执行的下一指令的地址:<strong>CS:IP</strong></p>
<p>现场: 程序运行所依赖的信息集合.</p>
<p>中断类型: 强迫性中中断和自愿中断</p>
<ul>
<li>强迫性: 程序没有预期,例如: <strong>I/O</strong>,<strong>外部中断</strong></li>
<li>自愿中断: 程序有预期的,例如: <strong>执行访管指令</strong></li>
</ul>
<p>外中断(<strong>中断</strong>)和内中断(<strong>俘获</strong>)</p>
<ul>
<li>外中断:由CPU外部事件引起, 例如:  <strong>I/O</strong>, 外部事情</li>
<li>内中断: 由CPU内部事件引起. 例如: 访管中断,程序中断</li>
</ul>
<p>外中断: 不可屏蔽和可屏蔽</p>
<ul>
<li>不可屏蔽中断: 中断的原因很紧要,CPU必须响应</li>
<li>可屏蔽中断: 中断的原因不很紧要,CPU可以不必响应</li>
</ul>
<p>断点: 程序将要执行的下一个指令的地址</p>
<p>现场: 程序正确运行所依赖的信息集合</p>
<ul>
<li>相关寄存器的内容</li>
</ul>
<p>现场的<strong>两个</strong>处理过程</p>
<ul>
<li>现场的保护: 进入中断服务程序之前,将寄存器的值入栈</li>
<li>现场的恢复: 退出中断服务程序之后,出栈</li>
</ul>
<h4 id="中断响应过程"><a href="#中断响应过程" class="headerlink" title="中断响应过程"></a>中断响应过程</h4><ol>
<li>识别中断源</li>
<li>保护断点和现场</li>
<li>装入<strong>中断服务程序的入口地址</strong></li>
<li>进入中断服务程序</li>
<li>恢复现场和断点</li>
<li>中断返回(<strong>IRET</strong>)</li>
</ol>
<h4 id="中断响应的实质"><a href="#中断响应的实质" class="headerlink" title="中断响应的实质"></a>中断响应的实质</h4><ul>
<li>交换指令执行地址的过程(CS:IP发生变化,)</li>
<li>交换了CPU的态:主程序在<strong>用户态</strong>完成,中断程序在<strong>核态</strong>完成</li>
<li>工作:现场保护和恢复.通信</li>
</ul>
<h2 id="操作系统用户界面"><a href="#操作系统用户界面" class="headerlink" title="操作系统用户界面"></a>操作系统用户界面</h2><ul>
<li>重点/难点</li>
</ul>
<ol>
<li>操作系统启动过程</li>
<li>操作系统生成过程</li>
<li>系统调用机制</li>
</ol>
<h3 id="操作系统启动过程"><a href="#操作系统启动过程" class="headerlink" title="操作系统启动过程"></a>操作系统启动过程</h3><ol>
<li>操作系统启动过程<br>实模式和保护模式</li>
</ol>
<ul>
<li><p>实模式(REAL MODE,刚刚开机)</p>
</li>
<li><p>程序按照8086寻址方法,1MB空间</p>
</li>
<li><p>前面640K [00000~9FFFF]: 基本内存</p>
</li>
<li><p>中间128K [A0000~BFFFF]: 显卡显存</p>
</li>
<li><p>末尾256K [C0000~FFFFF]: BIOS</p>
<ul>
<li>显卡BIOS<ul>
<li>IDE控制器BIOS</li>
<li>系统<strong>BIOS</strong>(重点)</li>
</ul>
</li>
<li>寻址方式: 物理地址(20位) = 段地址(16位):偏移地址(16位)</li>
<li>CPU单任务运行</li>
</ul>
</li>
<li><p>保护模式(内存模式,PROTECT MODE)</p>
<ul>
<li>寻址方式: 段(<strong>32位</strong>)和偏移量(<strong>32位</strong>),</li>
<li>可寻址<strong>4GB</strong>空间</li>
<li>段页式寻址机制</li>
<li>虚拟地址,进程,封闭空间</li>
<li>CPU支持多任务</li>
<li>应用程序和操作系统的运行环境都被<strong>保护</strong>(保护了内存)</li>
</ul>
</li>
</ul>
<h4 id="系统BIOS"><a href="#系统BIOS" class="headerlink" title="系统BIOS"></a>系统BIOS</h4><ul>
<li><p>系统启动配置</p>
<ul>
<li>基本设备IO服务</li>
<li>系统加电自检和启动</li>
</ul>
<p>按下<strong>PowerOn</strong>或者Reset执行第一条指令</p>
<ul>
<li>执行FFFF0处的指令: <strong>JUMP POST</strong> ,跳转到<strong>加电自检</strong>处.</li>
</ul>
<p>加电自检Power On Self-Test</p>
<ul>
<li>初始化基本硬件(CPU,内存,显卡)</li>
<li>自检正常不提示,错误则喇叭提示</li>
</ul>
<p>加电自检完成后:</p>
<ul>
<li>查找BIOS,调用显卡BIOS</li>
<li>查找其他设备执行相应设备的BIOS</li>
<li>显示启动画面</li>
<li>读入OS,OS接管计算机 </li>
</ul>
</li>
</ul>
<h4 id="主启动记录"><a href="#主启动记录" class="headerlink" title="主启动记录"></a><a href="MBR">主启动记录</a></h4><ul>
<li>存放在硬盘/软盘的首扇区<ul>
<li>存放和OS启动的相关信息,如路径,需要的参数等</li>
<li>512MB</li>
<li>结束于0xAA55H</li>
</ul>
</li>
</ul>
<h5 id="MBR-硬盘分区-格式化"><a href="#MBR-硬盘分区-格式化" class="headerlink" title="MBR/硬盘分区/格式化"></a>MBR/硬盘分区/格式化</h5><p>硬盘的<strong>第一个扇区</strong>存放MBR, 即主启动扇区.剩下的分区的首扇区记录特殊的内容,称为<strong>分区启动信息</strong></p>
<p>首扇区的最前面也有一块特殊的内容,称之为<a href="PBR">主启动扇区</a> , 用于启动操作系统和加载操作系统</p>
<h6 id="BIOS和MBR程序运行过程"><a href="#BIOS和MBR程序运行过程" class="headerlink" title="BIOS和MBR程序运行过程"></a>BIOS和MBR程序运行过程</h6><ol>
<li>POST $\rightarrow$ CMOS设置(硬盘启动) $\rightarrow$  读取MBR $\rightarrow$ 控制权交给MBR</li>
<li>MBR读取[分区表](Partion Table) $\rightarrow$ 找到[活动分区](Active Partion) , 并确认其他分区都是不活动分区 $\rightarrow$ 读取活动分区的<a href="分区引导记录PBR">第一个分区</a> $\rightarrow$ 加载到内存</li>
<li>PBR继续控制后面的引导过程</li>
</ol>
<h3 id="操作系统的启动"><a href="#操作系统的启动" class="headerlink" title="操作系统的启动"></a>操作系统的启动</h3><ul>
<li>启动过程: 从<strong>加电</strong> 到<strong>用户工作环境</strong>准备好的过程</li>
</ul>
<ol>
<li>初始引导</li>
<li>核心初始化</li>
<li>系统初始化</li>
</ol>
<h4 id="初始引导"><a href="#初始引导" class="headerlink" title="初始引导"></a>初始引导</h4><ul>
<li><p>把OS核心(以文件的方式存在在硬盘上)装入内存,并使之开始工作接管操作系统</p>
<ul>
<li><p>加点,JUMP POST  </p>
</li>
<li><p>BIOS中的启动程序运行</p>
</li>
</ul>
<p>启动程序: 读取<a href="0面0道第1扇区">MBR</a>的内容,加载MBR中的引导程序</p>
<p>引导程序: 根据相关参数,读取硬盘指定位置的文件到内存</p>
<p>加载硬盘上的OS内核,并初始化基本参数</p>
</li>
</ul>
<h4 id="核心初始化"><a href="#核心初始化" class="headerlink" title="核心初始化"></a>核心初始化</h4><ul>
<li>OS内核初始化系统的核心数据</li>
<li>各种寄存器的初始化</li>
<li>存储系统和页表的初始化</li>
<li>核心进程的构建</li>
</ul>
<h4 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h4><ul>
<li>为用户使用系统做准备,使系统处于待命状态</li>
</ul>
<h4 id="Windows启动"><a href="#Windows启动" class="headerlink" title="Windows启动"></a>Windows启动</h4><ol>
<li>POST</li>
</ol>
<ul>
<li>加电吼BIOS启动主机自检</li>
</ul>
<ol start="2">
<li>初始引导</li>
</ol>
<ul>
<li>BIOS从MBR读入<strong>引导程序</strong>, 装入内存的特定位置</li>
<li>引导程序启动DOS7.0,调入操作系统核心</li>
<li>WINDOWS接管系统</li>
</ul>
<ol start="3">
<li>核心初始化</li>
</ol>
<ul>
<li>资源状态,核心数据初始化</li>
</ul>
<ol start="4">
<li>系统初始化</li>
</ol>
<ul>
<li>GUI界面生成, 系统处于待命/消息接受状态</li>
</ul>
<h3 id="操作系统生成"><a href="#操作系统生成" class="headerlink" title="操作系统生成"></a>操作系统生成</h3><ul>
<li>满足特定硬件环境和用户需要，<strong>组装</strong>和<strong>构建</strong>操作系统的过程</li>
</ul>
<h4 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h4><ul>
<li>根据硬件环境/用户配置功能模块和构造参数</li>
<li><strong><a href="build">构建</a>OS的映像</strong></li>
</ul>
<h4 id="OS生成的前提"><a href="#OS生成的前提" class="headerlink" title="OS生成的前提"></a>OS生成的前提</h4><ul>
<li>OS由可拆装模块构成</li>
<li>有交互式配置工具（改变现有参数）</li>
<li>有映像<a href="build">构建</a>工具，将第二步获得的源代码编译</li>
</ul>
<h5 id="LINUX"><a href="#LINUX" class="headerlink" title="LINUX"></a>LINUX</h5><ol>
<li><p>获取Linux源代码</p>
</li>
<li><p>选择和启动内核配置程序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="3">
<li><p>根据需要配置内核模块和参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Loadable module support	//设置对可加载模块的支持</span><br><span class="line">Processor <span class="built_in">type</span> and features	//设置CPU类型</span><br><span class="line">General setup	//对普通属性的一些设置</span><br><span class="line">Parallel port support //并口支持</span><br><span class="line">Plug and Play configuration //即插即用配置</span><br><span class="line">Block devices	//块设备支持的选项</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新编译新的内核</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make dep	//生成依赖dependency信息</span><br><span class="line">make clean	//清除旧的编译结果</span><br><span class="line">make bzImage	//二进制文件</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译和安装新的模块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make modules</span><br><span class="line">make modules install	//模块被编译且安装到/usr/lib/内核版本号目录下</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动新内核</p>
</li>
</ol>
<h3 id="OS用户界面"><a href="#OS用户界面" class="headerlink" title="OS用户界面"></a>OS用户界面</h3><ul>
<li>OS提供给用户控制计算机的机制，又称用户接口</li>
</ul>
<p>用户界面的分类：</p>
<ul>
<li>操作界面</li>
<li>系统调用</li>
</ul>
<h4 id="操作界面"><a href="#操作界面" class="headerlink" title="操作界面"></a>操作界面</h4><ul>
<li><p>图形用户接口（GUI,Graphic User Interface）</p>
<p>包括窗口，图标，菜单，按钮，鼠标</p>
</li>
<li><p>键盘命令（COMMAND)</p>
<ul>
<li>在控制台下接受键盘输入的命令</li>
<li>类型： 普通命令，批处理程序，shell</li>
</ul>
</li>
</ul>
<h4 id="Shell脚本编程"><a href="#Shell脚本编程" class="headerlink" title="Shell脚本编程"></a>Shell脚本编程</h4><p><a href="Script">脚本</a>通过类似程序的方式执行具有一定逻辑顺序的命令序列完成较复杂的功能和人机交互</p>
<ul>
<li>脚本程序保存在<strong>文本文件</strong>中</li>
<li>脚本程序是Shell命令语句的集合</li>
</ul>
<p>mkdir:创建路径<br>ldconfig:使配置文件生效<br>rm: 删除文件<br>-rf(参数)表示删除文件夹中的一个子目录</p>
<ul>
<li>执行Shell脚本文件需要具有<a href="x">可执行属性</a><br><code>Chmod + x MyScript.sh</code>来添加可执行属性</li>
</ul>
<h5 id="运行脚本程序的三个方法"><a href="#运行脚本程序的三个方法" class="headerlink" title="运行脚本程序的三个方法"></a>运行脚本程序的三个方法</h5><ol>
<li>直接运行(使用缺省版本的Shell运行)</li>
<li>使用某个特定版本的Shell执行脚本</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bash first_script</span><br></pre></td></tr></table></figure>

<ul>
<li>指定一个特定版本的shell版本(此例是<strong>bash</strong>)</li>
<li>逐行执行脚本中的命令</li>
<li>当脚本文件中的命令依次执行完毕,临时子shell<strong>自动结束运行</strong>,返回用户原来使用的shell</li>
</ul>
<ol start="3">
<li>在脚本文件<strong>首行</strong>指定shell</li>
</ol>
<ul>
<li>在脚本文件开头增加一行``#!/bin/bash –#!必须顶格,后面接shell全路径</li>
<li>可以从/etc/shell获知所有可用shell及其绝对路径</li>
</ul>
<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><ul>
<li>重点掌握<strong>线程</strong>,<strong>同步和P-V操作</strong>, <strong>Windows和Linux同步机制</strong>,<strong>进程通信</strong></li>
</ul>
<p>OS区别与应用软件最核心的功能在于OS有进程管理功能和内存管理功能，如果一个应用软件具有上述两个功能我们可以把他看做一个OS</p>
<h3 id="进程概念"><a href="#进程概念" class="headerlink" title="进程概念"></a>进程概念</h3><h4 id="进程的基本概念"><a href="#进程的基本概念" class="headerlink" title="进程的基本概念"></a>进程的基本概念</h4><ul>
<li>程序在并发环境中的问题:</li>
</ul>
<ol>
<li>运行过程不确定,一个程序什么时候暂停什么时候继续,程序员无法控制.完全由操作系统控制</li>
<li>结果不可再现.可能受到干扰,干扰的结果不可确定<br>解决方案: 对运行过程施加相互约束</li>
</ol>
<ul>
<li>新的概念:进程<br>描述和管理程序<strong>运行过程</strong><br>程序在某个数据集合上的<strong>一次</strong> <strong>运行活动</strong></li>
<li>数据集合: 软/硬件环境,多个进程共存/共享的环境</li>
<li>进程的特性:</li>
</ul>
<ol>
<li>动态性<br>进程是程序的一次执行过程,动态地产生/消亡</li>
<li>并发性<br>进程同其他进程一起向前推进</li>
<li>异步性<br>进程按照各自的速度向前推进</li>
<li>独立性<br>进程是OS分配资源和调度CPU的单位</li>
</ol>
<p>######　进程和程序的区别</p>
<ul>
<li>静态和动态</li>
</ul>
<ol>
<li>进程是动态的:程序的一次执行过程</li>
<li>程序是静态的:一组指令的有效集合</li>
</ol>
<ul>
<li>暂存和长存</li>
</ul>
<ol>
<li>进程是暂存的: 在<strong>内存</strong>上驻留</li>
<li>程序是长存的: 在介质上长期保存</li>
</ol>
<ul>
<li>程序和进程的对应<br>一个程序可能有多个进程</li>
</ul>
<h5 id="进程的类型"><a href="#进程的类型" class="headerlink" title="进程的类型"></a>进程的类型</h5><ul>
<li>按照使用资源的权限</li>
</ul>
<ol>
<li>系统进程:指系统内核相关和进程</li>
<li>用户进程: 指运行于用户态的进程</li>
</ol>
<ul>
<li>按对CPU的依赖性</li>
</ul>
<ol>
<li>偏CPU进程: 计算型进程: 如科学计算等</li>
<li>偏I/O进程: 侧重于I/O的进程</li>
</ol>
<h4 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h4><ul>
<li>运行状态(Running)<br>进程已经占有CPU,在CPU上运行,对于大多数计算机来说只有一个CPU所以只有一个进程能够真正的占用CPU</li>
<li>就绪状态(Ready)<br>具备运行条件,但由于<strong>无CPU</strong>,暂时不能运行</li>
<li>阻塞状态(Block)或等待状态(Wait)<br>因为等待某项服务完成或信号不能运行的状态,如等待: 系统调用, I/O操作, 合作进程信号</li>
</ul>
<p>#####　进程状态的变迁</p>
<p>进程的状态可以依据一定的条件相互转化．</p>
<ol>
<li><p>就绪$ \rightarrow$ 运行<br>进程调度</p>
<ol start="2">
<li>运行$ \rightarrow$ 就绪<br>时间片到了,或者优先级更高的进程抢占了CPU</li>
<li>运行$ \rightarrow$ 阻塞<br>请求OS提供服务,等待某个信号的到来</li>
<li>阻塞$ \rightarrow$ 就绪<br>等待的服务完成 了,等待的信号到来了</li>
</ol>
<h4 id="进程控制块-Process-Control-Block"><a href="#进程控制块-Process-Control-Block" class="headerlink" title="进程控制块(Process Control Block)"></a>进程控制块(Process Control Block)</h4><ul>
<li>描述进程状态,资源,和相关进程关系的<strong>数据结构</strong></li>
<li>PCB是进程的<strong>标志</strong></li>
<li>创建进程时创建PCB,进程撤销后PCB同时撤销</li>
</ul>
</li>
</ol>
<p>进程= 程序 + PCB. 程序包含代码和数据</p>
<h6 id="PCB的数据结构"><a href="#PCB的数据结构" class="headerlink" title="PCB的数据结构"></a>PCB的数据结构</h6><ol>
<li>name(ID): 进程名称,标识符</li>
<li>status: 状态</li>
<li>next: 指向下一个PCB的指针</li>
<li>start_addr: 程序地址</li>
<li>priority: 优先级</li>
<li>cpu_status: 现场保留区(堆栈)</li>
<li>comm_info: 进程通信</li>
<li>process_family: 家族</li>
<li>own_resource: 资源</li>
</ol>
<h5 id="进程的切换"><a href="#进程的切换" class="headerlink" title="进程的切换"></a>进程的切换</h5><ul>
<li>进程的上下文:Context,进程的运行环境,CPU环境<br>进程的切换过程</li>
<li>换入进程的上下文进入CPU,从<strong>栈</strong>上读入,同时更新寄存器的信息</li>
<li>换出进程的上下文离开CPU,保存到<strong>栈</strong>中,将来CPU重新读取进程的时候就从栈上读取</li>
</ul>
<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>
<h3 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h3><ul>
<li>进程生存期间对其全部行为的控制</li>
</ul>
<p>四个典型控制行为: </p>
<ol>
<li>创建进程</li>
<li>撤销进程</li>
<li>阻塞进程</li>
<li>唤醒进程</li>
</ol>
<h4 id="进程创建"><a href="#进程创建" class="headerlink" title="进程创建"></a>进程创建</h4><ul>
<li>功能: 创建一个具有指定标识的进程</li>
<li>参数: 进程标识,优先级,进程起始地址,CPU初始状态,资源清单</li>
</ul>
<h6 id="创建进程的过程"><a href="#创建进程的过程" class="headerlink" title="创建进程的过程"></a>创建进程的过程</h6><ol>
<li>创建一个空的PCB</li>
<li>获得并赋予进程标识符ID</li>
<li>为进程分配空间</li>
<li>初始化PCB的成员变量</li>
<li>插入相应的进程队列(新进程插入就绪队列)<br>我们总是默认新创建的进程是<strong>就绪的</strong> ,只要给他CPU立刻就可以运行</li>
</ol>
<h4 id="进程撤销"><a href="#进程撤销" class="headerlink" title="进程撤销"></a>进程撤销</h4><ul>
<li>功能: 撤销一个指定的进程,收回进程所占有的资源,撤销该进程的PCB</li>
<li>撤销进程的时机/事件</li>
</ul>
<ol>
<li>正常结束</li>
<li>异常结束</li>
<li>外界干预</li>
</ol>
<ul>
<li>参数: 被撤销的进程ID</li>
</ul>
<h6 id="撤销的过程"><a href="#撤销的过程" class="headerlink" title="撤销的过程"></a>撤销的过程</h6><ol>
<li>在PCB队列中检索出该PCB</li>
<li>获取该进程的状态</li>
<li>若该进程处在运行态,立即终止该进程<br>这里我们需要注意,在OS中,一个操作系统可能有<strong>父进程</strong>也可能有<strong>子进程</strong>,如果要被撤销的进程存在<strong>子进程</strong>,那么我们需要先撤销他的<strong>子进程</strong>(递归过程)</li>
<li>释放进程所占有的资源</li>
<li>将进程从PCB队列移除</li>
</ol>
<h5 id="进程阻塞"><a href="#进程阻塞" class="headerlink" title="进程阻塞"></a>进程阻塞</h5><ul>
<li>功能: 停止进程的执行.变为阻塞</li>
<li>阻塞的时间/事件</li>
</ul>
<ol>
<li>请求系统服务:由于某种原因,OS不能立即满足进程的要求</li>
<li>启动某种操作: 进程启动某种操作,阻塞等待该进程执行完毕</li>
<li>新数据尚未到达: A进程需要获得B进程的<strong>中间结果</strong> A进程等待</li>
<li>无新工作可做: 进程完成任务后,<strong>自我阻塞</strong> 等待新任务到达</li>
</ol>
<ul>
<li>参数: <strong>阻塞原因</strong>, 不同的阻塞原因构建不同的阻塞队列</li>
</ul>
<h5 id="阻塞的实现"><a href="#阻塞的实现" class="headerlink" title="阻塞的实现"></a>阻塞的实现</h5><ol>
<li>停止运行</li>
<li>将PCB<strong>运行态</strong>改为<strong>阻塞态</strong></li>
<li>插入相应原因的阻塞队列</li>
<li>转调度程序</li>
</ol>
<h4 id="进程唤醒"><a href="#进程唤醒" class="headerlink" title="进程唤醒"></a>进程唤醒</h4><ul>
<li>功能: 唤醒处于<strong>阻塞队列</strong>当中的某个进程</li>
<li>参数: 被唤醒进程的ID</li>
<li>引起唤醒的时机/事件</li>
</ul>
<ol>
<li>系统服务由不满到满足</li>
<li>I/O完成</li>
<li>新数据到达</li>
<li>进程提出新请求(服务)</li>
</ol>
<h4 id="进程控制原语"><a href="#进程控制原语" class="headerlink" title="进程控制原语"></a>进程控制原语</h4><ul>
<li>由若干指令构成的具有特定功能的函数</li>
<li>具有<strong>原子性</strong>,操作不可分割,要么执行成功,要么执行失败,中途不可停下</li>
</ul>
<p>进程控制原语:</p>
<ol>
<li>创建</li>
<li>撤销</li>
<li>阻塞</li>
<li>唤醒</li>
</ol>
<h3 id="Windows控制进程"><a href="#Windows控制进程" class="headerlink" title="Windows控制进程"></a>Windows控制进程</h3><h3 id="Linux进程控制"><a href="#Linux进程控制" class="headerlink" title="Linux进程控制"></a>Linux进程控制</h3><ul>
<li>创建进程fork(),返回一个pid_t的整形值<br>例如,<code>pid_t pid = fork()</code></li>
<li>新建进程是当前进程的<strong>子进程</strong>,在Linux中所有的进程都具有家族关系</li>
<li>父进程与子进程<br>父进程: fork()的调用者<br>子进程: 新建的进程</li>
<li>子进程是父进程的复制,具有和父进程相同的代码,数据,堆栈,差别在于<strong>ID</strong>号不一样,与时间有关的信息不一样</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> 	fork();</span><br><span class="line"> 	<span class="built_in">printf</span>(<span class="string">"Hello World\n"</span>);</span><br><span class="line"> 	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在屏幕上会输出两个Hello World的字符串</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line">    pid = fork();</span><br><span class="line">    <span class="keyword">if</span>(pid == <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Hello World\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pid &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"How are you\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时在屏幕上输出一行<code>Hello World</code>与一行<code>How are you</code>.<br>在子进程中,<code>pid=0</code>,在父进程中<code>pid&gt;0</code>(子进程ID),如果执行出错,返回-1<br>但是父进程,子进程是<strong>并发的</strong>,所以字符串输出顺序<strong>不确定</strong>.不会无限循环和递归创建子进程.</p>
<h4 id="子进程和父进程的并发"><a href="#子进程和父进程的并发" class="headerlink" title="子进程和父进程的并发"></a>子进程和父进程的并发</h4><p>当父进程中的<code>pid = fork()</code>指令执行时,复制相同的代码到子进程.<code>fork()</code>指令之前的指令<strong>不再执行</strong>,从指令后面的语句并发.</p>
<h4 id="fork函数的实现"><a href="#fork函数的实现" class="headerlink" title="fork函数的实现"></a>fork函数的实现</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">do_fork</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="keyword">unsigned</span> <span class="keyword">long</span> clone_flags,</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="keyword">unsigned</span> <span class="keyword">long</span> stack_start,</span></span></span><br><span class="line"><span class="function"><span class="params">	struct pt_regs *regs,</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="keyword">unsigned</span> <span class="keyword">long</span> stack_size</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br><span class="line"><span class="keyword">int</span> do_fork&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">p</span>;</span></span><br><span class="line">    p = alloc_task_struct();<span class="comment">//分配存放位置的内存</span></span><br><span class="line">    ......</span><br><span class="line">    copy_files(clone_flags,p);</span><br><span class="line">    copy_fs(clone_flags,p);</span><br><span class="line">    copy_mm(clone_flags,p);<span class="comment">//拷贝进程所有信息</span></span><br><span class="line">    ......</span><br><span class="line">    wake_up_process(p);<span class="comment">//唤醒进程,挂入可执行队列等待被调度</span></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="exec函数簇"><a href="#exec函数簇" class="headerlink" title="exec函数簇"></a>exec函数簇</h4><ul>
<li>装入一个<strong>指定的可执行程序</strong>运行</li>
<li><strong>使子进程具有和父进程完全不同的新功能</strong></li>
</ul>
<p>步骤:</p>
<ul>
<li>根据文件名找到相应的可执行程序</li>
<li>将可执行程序的内容填入子进程的地址空间</li>
<li>进入新进程执行且不再返回</li>
</ul>
<h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><h4 id="线程概念"><a href="#线程概念" class="headerlink" title="线程概念"></a>线程概念</h4><ul>
<li>由CPU可以直接运行的实体,程序内部的执行路径</li>
<li>一个进程可以创建多个线程</li>
<li>多个线程<strong>共享</strong>CPU可以实现并发运行</li>
</ul>
<ul>
<li>CreateThread()<br>把一个函数创建为一个线程</li>
</ul>
<h5 id="单线程程序和多线程程序"><a href="#单线程程序和多线程程序" class="headerlink" title="单线程程序和多线程程序"></a>单线程程序和多线程程序</h5><ul>
<li>单线程: 整个进程只有一个线程,Windows程序默认只有一个线程(主线程:main线程)</li>
<li>多线程:整个进程至少有两个线程,<strong>主线程</strong>和<strong>至少一个用户线程</strong></li>
</ul>
<h4 id="线程典型应用场景"><a href="#线程典型应用场景" class="headerlink" title="线程典型应用场景"></a>线程典型应用场景</h4><ol>
<li>程序的多个功能需要并发运行<br>例如同时画圆和画方, 暴风影音(在线看电影)(视频解码,音频解码,网络接收)<br>为每一个功能创建为一个线程,从而实现多功能的并发</li>
<li>提高<strong>窗口程序</strong>的交互性</li>
<li>需要改善程序结构的地方</li>
<li>多核CPU上的应用</li>
</ol>
<h5 id="创建线程的补充说明"><a href="#创建线程的补充说明" class="headerlink" title="创建线程的补充说明"></a>创建线程的补充说明</h5><ul>
<li>Win32库创建线程: CreateThread(线程函数,参数)</li>
<li>MFC创建线程: AfxBeginThread(线程函数,参数)</li>
<li>创建远程线程: CreateRemoteThread(进程,线程函数,参数)<strong>这个创建的线程不是在当前控制的进程中</strong></li>
<li>Linux创建线程:pthread_create(线程函数,参数)</li>
</ul>
<h3 id="临界区和锁"><a href="#临界区和锁" class="headerlink" title="临界区和锁"></a>临界区和锁</h3><h4 id="临界资源和临界区"><a href="#临界资源和临界区" class="headerlink" title="临界资源和临界区"></a>临界资源和临界区</h4><ul>
<li><p>临界资源(Critical Resource): 一次只允许<strong>一个进程</strong>独占访问的资源</p>
</li>
<li><p>临界区(Critical Section): 进程中访问临界资源的<strong>程序段</strong></p>
</li>
<li><p>临界区和临界资源的访问特点:</p>
<ul>
<li>具有排他性</li>
<li>并发进程不能<strong>同时进入</strong>临界区</li>
</ul>
</li>
</ul>
<h5 id="设计临界区访问机制的四个原则"><a href="#设计临界区访问机制的四个原则" class="headerlink" title="设计临界区访问机制的四个原则"></a>设计临界区访问机制的四个原则</h5><ul>
<li>忙则等待: 当临界区忙时,其他进程必须在临界区外等待</li>
<li>空闲让进: 当无进程处于临界区时,任何有权进程可以进入临界区</li>
<li>有限等待: 进程进入临界区的请求应该在<strong>有限时间</strong>内得到满足</li>
<li>让权等待: 等待进程放弃CPU,(让其他进程有机会得到CPU)</li>
</ul>
<h5 id="临界区的大小设置"><a href="#临界区的大小设置" class="headerlink" title="临界区的大小设置"></a>临界区的大小设置</h5><p>临界区既不能设置的<strong>过大</strong>,也不能设置的<strong>过小</strong></p>
<p>设置的过大程序等待的时间会变成,过小则达不到设置临界区的目的</p>
<h4 id="锁机制"><a href="#锁机制" class="headerlink" title="锁机制"></a>锁机制</h4><ul>
<li>基本原理: 设置一个标志”S”，表明临界资源<strong>可用</strong>或者<strong>不可用</strong><ol>
<li>进入临界区之前检查标志是否<strong>可用</strong></li>
<li>如果不可用状态,进程在临界区之外<strong>等待</strong></li>
<li>如果可用,访问临界资源,并且设置标志为<strong>不可用</strong></li>
<li>退出临界区时将标志设为可用</li>
</ol>
</li>
</ul>
<h5 id="上锁操作"><a href="#上锁操作" class="headerlink" title="上锁操作"></a>上锁操作</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">LOCK(S)		<span class="comment">//上锁操作</span></span><br><span class="line">&#123;</span><br><span class="line">    test: <span class="keyword">if</span>(S==<span class="number">0</span>)	</span><br><span class="line">        <span class="keyword">goto</span> test;	<span class="comment">//测试锁标志,内部循环</span></span><br><span class="line">    	<span class="keyword">else</span> <span class="comment">//S==1</span></span><br><span class="line">            S=<span class="number">0</span>;	<span class="comment">//上锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="开锁操作"><a href="#开锁操作" class="headerlink" title="开锁操作"></a>开锁操作</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">UnLock(S)</span><br><span class="line">&#123;</span><br><span class="line">    S = <span class="number">1</span>;	<span class="comment">//开锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>开锁原语</strong></p>
<h5 id="锁机制访问临界区"><a href="#锁机制访问临界区" class="headerlink" title="锁机制访问临界区"></a>锁机制访问临界区</h5><ol>
<li>初始化锁状态S=1(可用)</li>
<li>进入临界区之前执行<strong>上锁</strong>操作</li>
<li>退出临界区之后执行<strong>开锁</strong>操作</li>
</ol>
]]></content>
      <tags>
        <tag>Notes</tag>
      </tags>
  </entry>
</search>
